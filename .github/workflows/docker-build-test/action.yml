name: Build Docker Containers and Run Tests
description: Building Docker images using ECR or GitHub Containers

inputs:
  test-command:
    description: 'NPM script to run tests, e.g., test:headless or test:healthcheck'
    required: false
    default: 'test:headless'
  skip_build:
    description: 'Skip building containers'
    required: false
    default: 'false'
  skip_tests:
    description: 'Skip running tests'
    required: false
    default: 'false'

runs:
  using: composite
  steps:

#    TODO: figure out how to use cache properly
#    - name: Cache Docker images.
#      uses: ScribeMD/docker-cache@0.3.6
#      with:
#        key: docker-${{ runner.os }}-${{ hashFiles('package.json') }}

    - name: Build application container
      if: inputs.skip_build != 'true'
      uses: ./actions/docker/build
      with:
        image-name: materials-designer
        image-tag: latest
        dockerfile: ./dockerfiles/app/Dockerfile
        cli-args: --build-arg BASE_IMAGE=node

#    - name: Push updated application container
#      shell: bash -l {0}
#      run: |
#        docker push ghcr.io/exabyte-io/materials-designer_x86_64:latest

    - name: Build test container
      if: inputs.skip_build != 'true'
      uses: ./actions/docker/build
      with:
        image-name: materials-designer-test
        dockerfile: ./dockerfiles/tests/Dockerfile
        cli-args: --build-arg BASE_IMAGE=node

    - name: Run tests
      if: inputs.skip_tests != 'true'
      shell: bash -l {0}
      run: |
        docker run -d -p 3001:3001 --name=materials-designer materials-designer:latest
        while ! docker logs materials-designer 2>&1 | grep "Compiled"; do
            failed=$(docker logs materials-designer 2>&1 | grep "Failed")
            if [[ "$failed" != "" ]]; then
                docker logs materials-designer 2>&1
                exit 1
            fi
            sleep 5
        done

        echo "Materials Designer is ready. Verifying accessibility on port 3001..."
        docker exec materials-designer curl -s http://localhost:3001 > /dev/null && echo "Port 3001 is accessible." || { echo "Port 3001 is not accessible."; exit 1; }

        echo "Running tests with command: npm run ${{ inputs.test-command }}"
        docker run --network=host \
          -e CYPRESS_BASE_URL=http://localhost:3001 \
          materials-designer-test npm run ${{ inputs.test-command }}

